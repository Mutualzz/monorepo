/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UiRouteImport } from './routes/ui'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UiIndexRouteImport } from './routes/ui/index'
import { Route as UiSurfacesPaperRouteImport } from './routes/ui/surfaces/paper'
import { Route as UiInputsTextareaRouteImport } from './routes/ui/inputs/textarea'
import { Route as UiInputsSliderRouteImport } from './routes/ui/inputs/slider'
import { Route as UiInputsRadioButtonRouteImport } from './routes/ui/inputs/radio-button'
import { Route as UiInputsMarkdownInputRouteImport } from './routes/ui/inputs/markdown-input'
import { Route as UiInputsInputRouteImport } from './routes/ui/inputs/input'
import { Route as UiInputsCheckboxRouteImport } from './routes/ui/inputs/checkbox'
import { Route as UiInputsButtonGroupRouteImport } from './routes/ui/inputs/button-group'
import { Route as UiInputsButtonRouteImport } from './routes/ui/inputs/button'
import { Route as UiFeedbackLinearProgressRouteImport } from './routes/ui/feedback/linear-progress'
import { Route as UiFeedbackCircularProgressRouteImport } from './routes/ui/feedback/circular-progress'
import { Route as UiDataDisplayTypographyRouteImport } from './routes/ui/data-display/typography'
import { Route as UiDataDisplayMarkdownRendererRouteImport } from './routes/ui/data-display/markdown-renderer'
import { Route as UiDataDisplayDividerRouteImport } from './routes/ui/data-display/divider'

const UiRoute = UiRouteImport.update({
  id: '/ui',
  path: '/ui',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UiIndexRoute = UiIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UiRoute,
} as any)
const UiSurfacesPaperRoute = UiSurfacesPaperRouteImport.update({
  id: '/surfaces/paper',
  path: '/surfaces/paper',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsTextareaRoute = UiInputsTextareaRouteImport.update({
  id: '/inputs/textarea',
  path: '/inputs/textarea',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsSliderRoute = UiInputsSliderRouteImport.update({
  id: '/inputs/slider',
  path: '/inputs/slider',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsRadioButtonRoute = UiInputsRadioButtonRouteImport.update({
  id: '/inputs/radio-button',
  path: '/inputs/radio-button',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsMarkdownInputRoute = UiInputsMarkdownInputRouteImport.update({
  id: '/inputs/markdown-input',
  path: '/inputs/markdown-input',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsInputRoute = UiInputsInputRouteImport.update({
  id: '/inputs/input',
  path: '/inputs/input',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsCheckboxRoute = UiInputsCheckboxRouteImport.update({
  id: '/inputs/checkbox',
  path: '/inputs/checkbox',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsButtonGroupRoute = UiInputsButtonGroupRouteImport.update({
  id: '/inputs/button-group',
  path: '/inputs/button-group',
  getParentRoute: () => UiRoute,
} as any)
const UiInputsButtonRoute = UiInputsButtonRouteImport.update({
  id: '/inputs/button',
  path: '/inputs/button',
  getParentRoute: () => UiRoute,
} as any)
const UiFeedbackLinearProgressRoute =
  UiFeedbackLinearProgressRouteImport.update({
    id: '/feedback/linear-progress',
    path: '/feedback/linear-progress',
    getParentRoute: () => UiRoute,
  } as any)
const UiFeedbackCircularProgressRoute =
  UiFeedbackCircularProgressRouteImport.update({
    id: '/feedback/circular-progress',
    path: '/feedback/circular-progress',
    getParentRoute: () => UiRoute,
  } as any)
const UiDataDisplayTypographyRoute = UiDataDisplayTypographyRouteImport.update({
  id: '/data-display/typography',
  path: '/data-display/typography',
  getParentRoute: () => UiRoute,
} as any)
const UiDataDisplayMarkdownRendererRoute =
  UiDataDisplayMarkdownRendererRouteImport.update({
    id: '/data-display/markdown-renderer',
    path: '/data-display/markdown-renderer',
    getParentRoute: () => UiRoute,
  } as any)
const UiDataDisplayDividerRoute = UiDataDisplayDividerRouteImport.update({
  id: '/data-display/divider',
  path: '/data-display/divider',
  getParentRoute: () => UiRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ui': typeof UiRouteWithChildren
  '/ui/': typeof UiIndexRoute
  '/ui/data-display/divider': typeof UiDataDisplayDividerRoute
  '/ui/data-display/markdown-renderer': typeof UiDataDisplayMarkdownRendererRoute
  '/ui/data-display/typography': typeof UiDataDisplayTypographyRoute
  '/ui/feedback/circular-progress': typeof UiFeedbackCircularProgressRoute
  '/ui/feedback/linear-progress': typeof UiFeedbackLinearProgressRoute
  '/ui/inputs/button': typeof UiInputsButtonRoute
  '/ui/inputs/button-group': typeof UiInputsButtonGroupRoute
  '/ui/inputs/checkbox': typeof UiInputsCheckboxRoute
  '/ui/inputs/input': typeof UiInputsInputRoute
  '/ui/inputs/markdown-input': typeof UiInputsMarkdownInputRoute
  '/ui/inputs/radio-button': typeof UiInputsRadioButtonRoute
  '/ui/inputs/slider': typeof UiInputsSliderRoute
  '/ui/inputs/textarea': typeof UiInputsTextareaRoute
  '/ui/surfaces/paper': typeof UiSurfacesPaperRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ui': typeof UiIndexRoute
  '/ui/data-display/divider': typeof UiDataDisplayDividerRoute
  '/ui/data-display/markdown-renderer': typeof UiDataDisplayMarkdownRendererRoute
  '/ui/data-display/typography': typeof UiDataDisplayTypographyRoute
  '/ui/feedback/circular-progress': typeof UiFeedbackCircularProgressRoute
  '/ui/feedback/linear-progress': typeof UiFeedbackLinearProgressRoute
  '/ui/inputs/button': typeof UiInputsButtonRoute
  '/ui/inputs/button-group': typeof UiInputsButtonGroupRoute
  '/ui/inputs/checkbox': typeof UiInputsCheckboxRoute
  '/ui/inputs/input': typeof UiInputsInputRoute
  '/ui/inputs/markdown-input': typeof UiInputsMarkdownInputRoute
  '/ui/inputs/radio-button': typeof UiInputsRadioButtonRoute
  '/ui/inputs/slider': typeof UiInputsSliderRoute
  '/ui/inputs/textarea': typeof UiInputsTextareaRoute
  '/ui/surfaces/paper': typeof UiSurfacesPaperRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/ui': typeof UiRouteWithChildren
  '/ui/': typeof UiIndexRoute
  '/ui/data-display/divider': typeof UiDataDisplayDividerRoute
  '/ui/data-display/markdown-renderer': typeof UiDataDisplayMarkdownRendererRoute
  '/ui/data-display/typography': typeof UiDataDisplayTypographyRoute
  '/ui/feedback/circular-progress': typeof UiFeedbackCircularProgressRoute
  '/ui/feedback/linear-progress': typeof UiFeedbackLinearProgressRoute
  '/ui/inputs/button': typeof UiInputsButtonRoute
  '/ui/inputs/button-group': typeof UiInputsButtonGroupRoute
  '/ui/inputs/checkbox': typeof UiInputsCheckboxRoute
  '/ui/inputs/input': typeof UiInputsInputRoute
  '/ui/inputs/markdown-input': typeof UiInputsMarkdownInputRoute
  '/ui/inputs/radio-button': typeof UiInputsRadioButtonRoute
  '/ui/inputs/slider': typeof UiInputsSliderRoute
  '/ui/inputs/textarea': typeof UiInputsTextareaRoute
  '/ui/surfaces/paper': typeof UiSurfacesPaperRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ui'
    | '/ui/'
    | '/ui/data-display/divider'
    | '/ui/data-display/markdown-renderer'
    | '/ui/data-display/typography'
    | '/ui/feedback/circular-progress'
    | '/ui/feedback/linear-progress'
    | '/ui/inputs/button'
    | '/ui/inputs/button-group'
    | '/ui/inputs/checkbox'
    | '/ui/inputs/input'
    | '/ui/inputs/markdown-input'
    | '/ui/inputs/radio-button'
    | '/ui/inputs/slider'
    | '/ui/inputs/textarea'
    | '/ui/surfaces/paper'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ui'
    | '/ui/data-display/divider'
    | '/ui/data-display/markdown-renderer'
    | '/ui/data-display/typography'
    | '/ui/feedback/circular-progress'
    | '/ui/feedback/linear-progress'
    | '/ui/inputs/button'
    | '/ui/inputs/button-group'
    | '/ui/inputs/checkbox'
    | '/ui/inputs/input'
    | '/ui/inputs/markdown-input'
    | '/ui/inputs/radio-button'
    | '/ui/inputs/slider'
    | '/ui/inputs/textarea'
    | '/ui/surfaces/paper'
  id:
    | '__root__'
    | '/'
    | '/ui'
    | '/ui/'
    | '/ui/data-display/divider'
    | '/ui/data-display/markdown-renderer'
    | '/ui/data-display/typography'
    | '/ui/feedback/circular-progress'
    | '/ui/feedback/linear-progress'
    | '/ui/inputs/button'
    | '/ui/inputs/button-group'
    | '/ui/inputs/checkbox'
    | '/ui/inputs/input'
    | '/ui/inputs/markdown-input'
    | '/ui/inputs/radio-button'
    | '/ui/inputs/slider'
    | '/ui/inputs/textarea'
    | '/ui/surfaces/paper'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UiRoute: typeof UiRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ui': {
      id: '/ui'
      path: '/ui'
      fullPath: '/ui'
      preLoaderRoute: typeof UiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ui/': {
      id: '/ui/'
      path: '/'
      fullPath: '/ui/'
      preLoaderRoute: typeof UiIndexRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/surfaces/paper': {
      id: '/ui/surfaces/paper'
      path: '/surfaces/paper'
      fullPath: '/ui/surfaces/paper'
      preLoaderRoute: typeof UiSurfacesPaperRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/textarea': {
      id: '/ui/inputs/textarea'
      path: '/inputs/textarea'
      fullPath: '/ui/inputs/textarea'
      preLoaderRoute: typeof UiInputsTextareaRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/slider': {
      id: '/ui/inputs/slider'
      path: '/inputs/slider'
      fullPath: '/ui/inputs/slider'
      preLoaderRoute: typeof UiInputsSliderRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/radio-button': {
      id: '/ui/inputs/radio-button'
      path: '/inputs/radio-button'
      fullPath: '/ui/inputs/radio-button'
      preLoaderRoute: typeof UiInputsRadioButtonRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/markdown-input': {
      id: '/ui/inputs/markdown-input'
      path: '/inputs/markdown-input'
      fullPath: '/ui/inputs/markdown-input'
      preLoaderRoute: typeof UiInputsMarkdownInputRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/input': {
      id: '/ui/inputs/input'
      path: '/inputs/input'
      fullPath: '/ui/inputs/input'
      preLoaderRoute: typeof UiInputsInputRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/checkbox': {
      id: '/ui/inputs/checkbox'
      path: '/inputs/checkbox'
      fullPath: '/ui/inputs/checkbox'
      preLoaderRoute: typeof UiInputsCheckboxRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/button-group': {
      id: '/ui/inputs/button-group'
      path: '/inputs/button-group'
      fullPath: '/ui/inputs/button-group'
      preLoaderRoute: typeof UiInputsButtonGroupRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/inputs/button': {
      id: '/ui/inputs/button'
      path: '/inputs/button'
      fullPath: '/ui/inputs/button'
      preLoaderRoute: typeof UiInputsButtonRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/feedback/linear-progress': {
      id: '/ui/feedback/linear-progress'
      path: '/feedback/linear-progress'
      fullPath: '/ui/feedback/linear-progress'
      preLoaderRoute: typeof UiFeedbackLinearProgressRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/feedback/circular-progress': {
      id: '/ui/feedback/circular-progress'
      path: '/feedback/circular-progress'
      fullPath: '/ui/feedback/circular-progress'
      preLoaderRoute: typeof UiFeedbackCircularProgressRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/data-display/typography': {
      id: '/ui/data-display/typography'
      path: '/data-display/typography'
      fullPath: '/ui/data-display/typography'
      preLoaderRoute: typeof UiDataDisplayTypographyRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/data-display/markdown-renderer': {
      id: '/ui/data-display/markdown-renderer'
      path: '/data-display/markdown-renderer'
      fullPath: '/ui/data-display/markdown-renderer'
      preLoaderRoute: typeof UiDataDisplayMarkdownRendererRouteImport
      parentRoute: typeof UiRoute
    }
    '/ui/data-display/divider': {
      id: '/ui/data-display/divider'
      path: '/data-display/divider'
      fullPath: '/ui/data-display/divider'
      preLoaderRoute: typeof UiDataDisplayDividerRouteImport
      parentRoute: typeof UiRoute
    }
  }
}

interface UiRouteChildren {
  UiIndexRoute: typeof UiIndexRoute
  UiDataDisplayDividerRoute: typeof UiDataDisplayDividerRoute
  UiDataDisplayMarkdownRendererRoute: typeof UiDataDisplayMarkdownRendererRoute
  UiDataDisplayTypographyRoute: typeof UiDataDisplayTypographyRoute
  UiFeedbackCircularProgressRoute: typeof UiFeedbackCircularProgressRoute
  UiFeedbackLinearProgressRoute: typeof UiFeedbackLinearProgressRoute
  UiInputsButtonRoute: typeof UiInputsButtonRoute
  UiInputsButtonGroupRoute: typeof UiInputsButtonGroupRoute
  UiInputsCheckboxRoute: typeof UiInputsCheckboxRoute
  UiInputsInputRoute: typeof UiInputsInputRoute
  UiInputsMarkdownInputRoute: typeof UiInputsMarkdownInputRoute
  UiInputsRadioButtonRoute: typeof UiInputsRadioButtonRoute
  UiInputsSliderRoute: typeof UiInputsSliderRoute
  UiInputsTextareaRoute: typeof UiInputsTextareaRoute
  UiSurfacesPaperRoute: typeof UiSurfacesPaperRoute
}

const UiRouteChildren: UiRouteChildren = {
  UiIndexRoute: UiIndexRoute,
  UiDataDisplayDividerRoute: UiDataDisplayDividerRoute,
  UiDataDisplayMarkdownRendererRoute: UiDataDisplayMarkdownRendererRoute,
  UiDataDisplayTypographyRoute: UiDataDisplayTypographyRoute,
  UiFeedbackCircularProgressRoute: UiFeedbackCircularProgressRoute,
  UiFeedbackLinearProgressRoute: UiFeedbackLinearProgressRoute,
  UiInputsButtonRoute: UiInputsButtonRoute,
  UiInputsButtonGroupRoute: UiInputsButtonGroupRoute,
  UiInputsCheckboxRoute: UiInputsCheckboxRoute,
  UiInputsInputRoute: UiInputsInputRoute,
  UiInputsMarkdownInputRoute: UiInputsMarkdownInputRoute,
  UiInputsRadioButtonRoute: UiInputsRadioButtonRoute,
  UiInputsSliderRoute: UiInputsSliderRoute,
  UiInputsTextareaRoute: UiInputsTextareaRoute,
  UiSurfacesPaperRoute: UiSurfacesPaperRoute,
}

const UiRouteWithChildren = UiRoute._addFileChildren(UiRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UiRoute: UiRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
