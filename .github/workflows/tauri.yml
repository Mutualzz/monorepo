name: Build and Deploy Binaries

on:
    workflow_dispatch:
    push:
        branches:
            - release

jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest"
                      args: "--target universal-apple-darwin"
                    - platform: "ubuntu-22.04"
                      args: "" # Linux
                    - platform: "windows-latest"
                      args: "" # Windows

        runs-on: ${{ matrix.platform }}

        steps:
            # Checkout repository
            - uses: actions/checkout@v4

            # Install system dependencies for Linux
            - name: Install dependencies (Linux only)
              if: matrix.platform == 'ubuntu-22.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            # Setup Node.js
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*

            # Enable Corepack and prepare pnpm
            - name: Enable Corepack (for pnpm)
              run: corepack enable

            - name: Prepare pnpm
              run: corepack prepare pnpm@10.14.0 --activate

            # Install Rust
            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Init public submodules
              run: |
                  git submodule update --init packages/ui
                  git submodule update --init packages/types

            - name: Init private submodules
              run: |
                  git config --global url."https://${GH_PAT}:@github.com/".insteadOf "https://github.com/"
                  git submodule update --init apps/app
                  git submodule update --init packages/validators
              env:
                  GH_PAT: ${{ secrets.GH_PAT }}
              shell: bash

            # Rust cache
            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "apps/app/src-tauri -> target"

            # Install dependencies
            - name: Install dependencies
              run: pnpm install

            - name: Install Wrangler
              run: npm install -g wrangler

            # Pre-build tasks (version generator, etc.)
            - name: Run pre-build tasks
              working-directory: apps/app
              run: pnpm run ci:prebuild

            - id: changelog
              run: |
                  if [ -f CHANGELOG.md ]; then
                    echo "body<<EOF" >> $GITHUB_OUTPUT
                    cat CHANGELOG.md >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT
                  else
                    echo "body=" >> $GITHUB_OUTPUT
                  fi
              shell: bash

            # Build and release Tauri app
            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
              with:
                  tagName: __VERSION__
                  releaseName: "Mutualzz __VERSION__"
                  releaseBody: ${{ steps.changelog.outputs.body }}
                  releaseDraft: false # Set to true if testing
                  prerelease: false
                  includeRelease: true
                  includeUpdaterJson: true
                  args: ${{ matrix.args }}

            - name: Upload binaries and generate latest.json
              run: |
                  echo "Uploading binaries for ${{ matrix.platform }}"

                  BASE_URL="https://proxy.mutualzz.com/releases/latest"

                  declare -A files

                  case "${{ matrix.platform }}" in
                    "windows-latest")
                      src_msi=$(find ./apps/app/src-tauri/target/release/bundle/msi -name "*.msi" | head -n1)
                      src_exe=$(find ./apps/app/src-tauri/target/release/bundle/msi -name "*.exe" | head -n1)

                      if [[ -f "$src_msi" ]]; then
                        dst_msi="MutualzzSetup.msi"
                        mv "$src_msi" "$dst_msi"
                        wrangler r2 put "mutualzz/releases/latest/$dst_msi" "$dst_msi" \
                          --binding=R2_BUCKET --account-id=${{ secrets.CF_ACCOUNT_ID }} --auth-key=${{ secrets.CF_API_TOKEN }}
                        files[win_msi]="$dst_msi"
                      fi

                      if [[ -f "$src_exe" ]]; then
                        dst_exe="MutualzzSetup.exe"
                        mv "$src_exe" "$dst_exe"
                        wrangler r2 put "mutualzz/releases/latest/$dst_exe" "$dst_exe" \
                          --binding=R2_BUCKET --account-id=${{ secrets.CF_ACCOUNT_ID }} --auth-key=${{ secrets.CF_API_TOKEN }}
                        files[win_exe]="$dst_exe"
                      fi
                      ;;

                    "macos-latest")
                      src_dmg=$(find ./apps/app/src-tauri/target/release/bundle/dmg -name "*.dmg" | head -n1)
                      if [[ -f "$src_dmg" ]]; then
                        dst_dmg="Mutualzz.dmg"
                        mv "$src_dmg" "$dst_dmg"
                        wrangler r2 put "mutualzz/releases/latest/$dst_dmg" "$dst_dmg" \
                          --binding=R2_BUCKET --account-id=${{ secrets.CF_ACCOUNT_ID }} --auth-key=${{ secrets.CF_API_TOKEN }}
                        files[osx]="$dst_dmg"
                      fi
                      ;;

                    "ubuntu-22.04")
                      src_deb=$(find ./apps/app/src-tauri/target/release/bundle/deb -name "*.deb" | head -n1)
                      src_rpm=$(find ./apps/app/src-tauri/target/release/bundle/rpm -name "*.rpm" | head -n1)
                      src_appimage=$(find ./apps/app/src-tauri/target/release/bundle/appimage -name "*.AppImage" | head -n1)

                      if [[ -f "$src_deb" ]]; then
                        dst_deb="Mutualzz.deb"
                        mv "$src_deb" "$dst_deb"
                        wrangler r2 put "mutualzz/releases/latest/$dst_deb" "$dst_deb" \
                          --binding=R2_BUCKET --account-id=${{ secrets.CF_ACCOUNT_ID }} --auth-key=${{ secrets.CF_API_TOKEN }}
                        files[linux_debian]="$dst_deb"
                      fi

                      if [[ -f "$src_rpm" ]]; then
                        dst_rpm="Mutualzz.rpm"
                        mv "$src_rpm" "$dst_rpm"
                        wrangler r2 put "mutualzz/releases/latest/$dst_rpm" "$dst_rpm" \
                          --binding=R2_BUCKET --account-id=${{ secrets.CF_ACCOUNT_ID }} --auth-key=${{ secrets.CF_API_TOKEN }}
                        files[linux_rpm]="$dst_rpm"
                      fi

                      if [[ -f "$src_appimage" ]]; then
                        dst_appimage="Mutualzz.AppImage"
                        mv "$src_appimage" "$dst_appimage"
                        wrangler r2 put "mutualzz/releases/latest/$dst_appimage" "$dst_appimage" \
                          --binding=R2_BUCKET --account-id=${{ secrets.CF_ACCOUNT_ID }} --auth-key=${{ secrets.CF_API_TOKEN }}
                        files[linux_appimage]="$dst_appimage"
                      fi
                      ;;
                  esac

                  echo "Generating latest.json manifest"

                  echo "{" > latest.json

                  if [[ -n "${files[win_exe]}" || -n "${files[win_msi]}" ]]; then
                    echo "  \"win\": {" >> latest.json
                    [[ -n "${files[win_exe]}" ]] && echo "    \"exe\": \"$BASE_URL/${files[win_exe]}\"," >> latest.json
                    [[ -n "${files[win_msi]}" ]] && echo "    \"msi\": \"$BASE_URL/${files[win_msi]}\"" >> latest.json
                    echo "  }," >> latest.json
                  fi

                  if [[ -n "${files[osx]}" ]]; then
                    echo "  \"osx\": \"$BASE_URL/${files[osx]}\"," >> latest.json
                  fi

                  linux_entries=()
                  [[ -n "${files[linux_debian]}" ]] && linux_entries+=("\"debian\": \"$BASE_URL/${files[linux_debian]}\"")
                  [[ -n "${files[linux_rpm]}" ]] && linux_entries+=("\"rpm\": \"$BASE_URL/${files[linux_rpm]}\"")
                  [[ -n "${files[linux_appimage]}" ]] && linux_entries+=("\"appimage\": \"$BASE_URL/${files[linux_appimage]}\"")
                  if [[ ${#linux_entries[@]} -gt 0 ]]; then
                    echo "  \"linux\": { ${linux_entries[*]} }" >> latest.json
                  fi

                  echo "}" >> latest.json

                  wrangler r2 put "mutualzz/releases/latest/latest.json" latest.json \
                    --binding=R2_BUCKET --account-id=${{ secrets.CF_ACCOUNT_ID }} --auth-key=${{ secrets.CF_API_TOKEN }}

                  echo "Upload complete"
              env:
                  R2_BUCKET: mutualzz
              shell: bash
