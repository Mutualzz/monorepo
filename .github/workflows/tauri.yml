name: Build and Deploy Binaries

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin" # ARM Macs
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin" # Intel Macs
          - platform: "ubuntu-22.04"
            args: "" # Linux
          - platform: "windows-latest"
            args: "" # Windows

    runs-on: ${{ matrix.platform }}

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Install system dependencies for Linux
      - name: Install dependencies (Linux only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Enable Corepack and prepare pnpm
      - name: Enable Corepack (for pnpm)
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@10.14.0 --activate

      # Install Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Init public submodules
        run: |
          git submodule update --init packages/ui
          git submodule update --init packages/types

      - name: Init private submodules
        run: |
          git config --global url."https://${GH_PAT}:@github.com/".insteadOf "https://github.com/"
          git submodule update --init apps/app
          git submodule update --init packages/validators
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # Rust cache
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "apps/app/src-tauri -> target"

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: pnpm install

      - name: Build project
        run: pnpm turbo run build --filter="./packages/ui" --filter="./apps/app" --filter="./packages/types" --filter="./packages/validators"

      # Pre-build tasks (version generator, etc.)
      - name: Run pre-build tasks
        working-directory: apps/app
        run: pnpm run ci:prebuild

      # Build and release Tauri app
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: "v__VERSION__"
          releaseName: "Mutualzz v__VERSION__"
          releaseBody: "See assets to download this version."
          releaseDraft: false                 # Set to true if testing
          prerelease: false
          args: ${{ matrix.args }}


      # Optional: list generated files for debugging
      - name: List built binaries
        working-directory: apps/app
        run: ls -R src-tauri/target/release/bundle
